// SassyIcons – v0.0.10 – 2014-06-09
// https://github.com/pascalduez/SassyIcons
// License: MIT

//
// SassyIcons
//

// Configuration

// Default settings.
$icons-defaults: (

  // Space around sprites in generated sprite map.
  // Useful with `$offset` parameter.
  // This setting is global for all sprite-maps.
  // Can be set per sprite-map with the `$spacing` parameter.
  spacing: 0,

  // Main icons directory. sprite-map-create() allows to use sub dirs.
  dir: "icons",

  // Name of the png sub-folders.
  dir-png: "png",

  // Name of the hidpi png sub-folders.
  dir-hidpi: "png_2x",

  // Scale of the hidpi pngs.
  hidpi-scale: 2,

  // Minimum resolution ratio used in the hidpi media query.
  hidpi-ratio: 1.3,

  // Whether to embed icons as data URI in the icon-single() mixin.
  single-embed: true,

  // Default file format unless overridden by parameter, svg | png.
  format: "svg",

  // Whether to support legacy browsers, svg fallback.
  legacy: true

);

// User settings.
$icons-settings: () !default;

// Retreive a configuration item.
@function conf($key) {
  @if not map-has-key($icons-defaults, $key) {
    @warn "No item `#{$key}` found in configuration.";
    @return false;
  }

  @return map-get(map-merge($icons-defaults, $icons-settings), $key);
}


// Push new entry to `$map`
// -----------------------------------------------------------------------------
// @param [map] $map
// @param $key
// @param $value
// -----------------------------------------------------------------------------
// @return [map]

@function _map-set($map, $key, $value) {
  @return map-merge($map, ($key: $value));
}



// Join `$list` into a string
// -----------------------------------------------------------------------------
// @param [list] $list
// @param [string] $glue
// -----------------------------------------------------------------------------
// @return [string]

@function _join($list, $glue: "") {
  $result: "";
  $length: length($list);

  @if $length < 1 {
    @return $result;
  }

  @for $i from 1 through $length {
    $result: $result
             + nth($list, $i)
             + if($i != $length, $glue, "");
  }

  @return $result;
}



// Helper: retreive a sprite map.
// -----------------------------------------------------------------------------
// @param [string] $name
// @param [string] $factor
// -----------------------------------------------------------------------------
// @return [spritemap]

@function _sprite-map-get($name, $factor: 1x) {
  @return map-get(map-get($icons-maps, $name), $factor);
}



// Helper: return correct sprites-map `background-position`.
// -----------------------------------------------------------------------------
// @param [spritemap] $map
// @param [string] $sprite
// @param [number] $offset-x
// @param [number] $offset-y
// @param [number] $scale
// -----------------------------------------------------------------------------
// @return [list]

@function _sprite-position($map, $sprite, $offset-x: 0, $offset-y: 0, $scale: 1) {
  $pos: sprite-position($map, $sprite, $offset-x, $offset-y * $scale);
  @return (nth($pos, 1) nth($pos, 2) / $scale);
}



// Hidpi media query builder.
// -----------------------------------------------------------------------------
// http://bjango.com/articles/min-device-pixel-ratio/
// http://brettjankord.com/2012/11/28/cross-browser-retinahigh-resolution-media-queries
// http://w3.org/blog/CSS/2012/06/14/unprefix-webkit-device-pixel-ratio
// -----------------------------------------------------------------------------

@mixin hidpi-mq() {
  $hidpi-ratio: conf(hidpi-ratio);

  @media (-webkit-min-device-pixel-ratio: $hidpi-ratio),
         (min-resolution: round($hidpi-ratio * 96dpi)),
         (min-resolution: $hidpi-ratio * 1dppx)
  {
    @content;
  }
}

//
// SassyIcons
//

// Storage
$icons-maps: ();

//
// Create a new sprite map from folder.
//
@mixin sprite-map-create(
  $name,
  $spacing: conf(spacing)
) {

  $sprites-1x: _join((conf(dir), $name, conf(dir-png), "*.png"), "/");
  $sprites-2x: _join((conf(dir), $name, conf(dir-hidpi), "*.png"), "/");

  $map-1x: sprite-map($sprites-1x, $spacing: $spacing);
  $map-2x: sprite-map($sprites-2x, $spacing: $spacing);

  $icons-maps: _map-set($icons-maps, $name, (1x: $map-1x, 2x: $map-2x)) !global;

  @at-root %sprite-map-#{$name}-image-map {
    background: {
      image: $map-1x;
      repeat: no-repeat;
    }
  }
  @at-root %sprite-map-#{$name}-2x-image-map {
    @include hidpi-mq {
      background: {
        image: $map-2x;
        size: ceil(image-width(sprite-path($map-2x)) / conf(hidpi-scale)) auto;
      }
    }
  }
}

//
// SassyIcons
//

//
// Main icon mixin.
//
@mixin icon(
  $name,
  $sprite,
  $offset: 0 0,
  $format: conf(format)
) {
  $map-1x: _sprite-map-get($name);
  $map-2x: _sprite-map-get($name, 2x);

  // Shorter mixin calls.
  $offset-x: nth($offset, 1);
  $offset-y: nth($offset, length($offset));

  $legacy-support: conf(legacy);

  $format: to-lower-case($format);

  @if $format == "svg" {

    $svg-file: _join((conf(dir), $name, "#{$sprite}.svg"), "/");

    background: {
      image: inline-image($svg-file);
      repeat: no-repeat;
    }

    .svg & {
      @content;
    }

    @if $legacy-support {
      .no-svg &,
      .no-js & {

        @extend %sprite-map-#{$name}-image-map;

        background-position: _sprite-position($map-1x, $sprite, $offset-x, $offset-y);
      }
    }

  }
  @else if $format == "png" {

    @extend %sprite-map-#{$name}-image-map;

    background-position: _sprite-position($map-1x, $sprite, $offset-x, $offset-y);

    @extend %sprite-map-#{$name}-2x-image-map;

    @include hidpi-mq {
      background-position: _sprite-position($map-2x, $sprite, $offset-x, $offset-y, conf(hidpi-scale));
    }
  }
}

//
// SassyIcons
//

//
// Embed a single icon as inline-image (no sprite).
// Should be used sporadically.
//
@mixin icon-single(
  $name,
  $sprite,
  $format: conf(format)
) {

  // sprite-file() and inline-image() no work.
  // @see https://github.com/chriseppstein/compass/issues/951

  $dir: conf(dir);
  $svg-file: _join(($dir, $name, "#{$sprite}.svg"), "/");
  $png-file-1x: _join(($dir, $name, conf(dir-png), "#{$sprite}.png"), "/");
  $png-file-2x: _join(($dir, $name, conf(dir-hidpi), "#{$sprite}.png"), "/");

  $function: if(conf(single-embed), inline-image, image-url);
  $svg-url: call($function, $svg-file);
  $png-url-1x: call($function, $png-file-1x);
  $png-url-2x: call($function, $png-file-2x);

  $legacy-support: conf(legacy);

  $format: to-lower-case($format);

  @if $format == "svg" {

    background: {
      image: $svg-url;
      repeat: no-repeat;
    }

    .svg & {
      @content;
    }

    @if $legacy-support {
      .no-svg &,
      .no-js & {
        background-image: $png-url-1x;
      }
    }

  }
  @else if $format == "png" {

    background: {
      image: $png-url-1x;
      repeat: no-repeat;
    }

    @include hidpi-mq {
      background: {
        image: $png-url-2x;
        size: ceil(image-width($png-file-2x) / conf(hidpi-scale)) auto;
      }
    }
  }
}


//
// Generated content.
//
@mixin generated($width: false, $height: false, $top: false, $right: false, $bottom: false, $left: false) {
  //
  //  Boilerplate styles for generated content .before :after
  //
  @if ($width) { width: $width };
  @if ($height) { height: $height };
  content: "";
  display: block;
  position: absolute;
  @if($top) { top: $top; }
  @if($right) { right: $right; }
  @if($bottom) { bottom: $bottom; }
  @if($left) { left: $left; }
  z-index: 1;

  @content;
}

//
// SassyIcons
//

//
// Include the icon in a generated "pseudo-element".
// Default to :before
// Allows for easier positioning or centering.
//
@mixin icon-generated(
  $name,
  $sprite,
  $pos: "before",
  $centered: false,
  $format: conf(format)
) {
  position: relative;

  &:#{$pos} {
    $sprite-file: sprite-file(_sprite-map-get($name), $sprite);

    $width: image-width($sprite-file);
    $height: image-height($sprite-file);

    @include generated($width, $height);

    @if ($centered) {
      top: 35%;
      top: calc(50% - #{$height} / 2);
      left: 35%;
      left: calc(50% - #{$width} / 2);
    }

    @include icon($name: $name, $sprite: $sprite, $format: $format);

    @content;
  }
}
